#! /usr/bin/python3
import sys
pythonversion=sys.version_info
if pythonversion[0] != 3 or pythonversion[1] < 6:
    print("This script requires Python 3.6 or higher")
    sys.exit(1)
import os
import getopt
sys.path.append(sys.path[0] + "/NTAPlib")
from cloneVolumes import cloneVolumes
from getVolumes import getVolumes
from getCGs import getCGs
import userio

snapomaticversion='dev'

validoptions={'clone' : {'target':'multistr', \
                         'name':'str', \
                         'snapshot':'str', \
                         'split':'bool', \
                         'debug':'bool', \
                         'restdebug':'bool'}, \
              'show' : {'target':'multistr', \
                        'cg':'bool', \
                        'debug':'bool', \
                        'restdebug':'bool'}}

requiredoptions={'clone':['target','name'], \
                 'show':['target']}

usage="Version " + snapomaticversion + "\n" + \
      "volume show\n" + \
      "          --target\n" + \
      "          (syntax: svm volume(s))\n\n" + \
      "          --cg\n" + \
      "          (restrict output to consistency group volumes)\n\n" + \
      "volume clone\n" + \
      "          --target\n" + \
      "          (svm volume)\n\n" + \
      "          --name\n" + \
      "          (name for the clone)\n\n" + \
      "          --snapshot\n" + \
      "          (OPTIONAL: name of the parent snapshot)\n\n" + \
      "          --split\n" + \
      "          (OPTIONAL: split the clone from parent)\n\n" + \
      "          [--debug]\n" + \
      "          (show debug output)\n\n" + \
      "          [--restdebug]\n" + \
      "          (show REST API calls and responses)\n\n"

myopts=userio.validateoptions(sys.argv,validoptions,usage=usage,required=requiredoptions)

try:
    snapshot=myopts.snapshot
except:
    snapshot=False
try:
    split=myopts.split
except:
    split=False

try:
    name=myopts.name
except:
    pass

debug=0
if myopts.debug:
    debug=debug+1

if myopts.restdebug:
    debug=debug+2

try:
    cg=myopts.cg
except:
    cg=False

svm=myopts.target[0]
voltargets={}
if len(myopts.target) == 1:
    voltargets={'*':['*']}
else:
    for item in myopts.target[1:]:
        pieces=item.split('/')
        if pieces[0] not in voltargets.keys():
            voltargets[pieces[0]] = []
        if len(pieces) == 1:
            voltargets[pieces[0]].append('*')
        elif len(pieces) == 2:
            voltargets[pieces[0]].append(pieces[1])
        else:
            userio.fail("Illegal format for target " + item)
    for vol in voltargets.keys():
        if len(voltargets[vol]) > 1 and '*' in voltargets[vol]:
            userio.fail("Volume targets includes a volume/LUN pair and that same volume")


if myopts.mode == 'clone':
    if not len(myopts.target) == 2:
        userio.fail(usage)
    else:
        volume=myopts.target[1]

if myopts.mode == 'show':
    if cg:
        volumes=getCGs(svm,volumes=voltargets.keys(),debug=debug)
    else:
        volumes=getVolumes(svm,volumes=voltargets.keys(),debug=debug)
    if not volumes.go():
        userio.message(volumes.reason)
        sys.exit(1)
    else:
        if cg:
            grid=[['CG','Parent','Volume','Size (GB)','Aggregate']]
            cglist=list(volumes.cgs.keys())
            cglist.sort()
            for cg in cglist:
                try:
                    parentfield=volumes.cgs[cg]['parent']
                except:
                    parentfield='-'
                volumelist=volumes.cgs[cg]['volumes']
                volumelist.sort()
                for volume in volumelist:
                    grid.append([cg,
                                 parentfield,
                                 volume,
                                 str(volumes.volumesmatch[volume]['size']/1048576),
                                 volumes.volumesmatch[volume]['aggrs'],
                                 ])
        else:
            grid=[['Volume','Size (GB)','Aggregate']]
            volumelist=list(volumes.volumesmatch.keys())
            volumelist.sort()
            for volume in volumelist:
                grid.append([volume,
                             str(volumes.volumesmatch[volume]['size']/1048576),
                             volumes.volumesmatch[volume]['aggrs']])
        userio.grid(grid)

elif myopts.mode == 'clone':
    if snapshot:
        clone=cloneVolumes(svm,(volume,name,snapshot),split=split,debug=debug)
    else:
        clone=cloneVolumes(svm,(volume,name),split=split,debug=debug)
    if not clone.go():
        userio.message(clone.reason)
        sys.exit(1)
    else:
        message="Cloned "
        if split and name not in clone.unsplit:
            message = message + "and split "
        message=message + name + " from " + volume 
        if snapshot:
            message=message + ":" + snapshot
        userio.message(message)
        sys.exit(0)
