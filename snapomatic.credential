#! /usr/bin/python3
import sys
pythonversion=sys.version_info
if pythonversion[0] != 3 or (pythonversion[1] < 6 or pythonversion[1] > 11):
    print("This script requires Python 3.6 through 3.11")
    sys.exit(1)
sys.path.append(sys.path[0] + "/NTAPlib")
import os
import userio
import fileio
import doREST
import json
import requests

snapomaticversion='dev'

if os.getenv("SNAPOMATIC_CREDENTIAL_PATH") is not None:
    configFile=os.getenv("SNAPOMATIC_CREDENTIAL_PATH")
elif os.name=='posix':
    configFile='/etc/snapomatic/config.json'
elif os.name=='nt':
    configFile='c:\snapomatic\config.json'



### main

if len(sys.argv) > 1:
    if sys.argv[1] == "INIT":
        if not fileio.forcemkdir(os.path.dirname(configFile),mode=700,quiet=True):
            userio.fail("Unable to create directory " + os.path.dirname(configFile))
        try:
            open(configFile,'w').write("{\n}\n")
        except:
            userio.fail("Unable to initialize " + configFile)
        userio.message("Credential cache initialized")
        sys.exit(0)
    else:
        userio.fail("The only argument accepted is INIT")


svmgrid=[['SVM name','Mgmt Interface','Username','Password','Data Interface']]
dbgrid=[['Database','Username','Password']]
svmlist=[]
sidlist=[]
mgmtlist=[]
datalist=[]

if not os.path.isfile(configFile):
    userio.fail("Unable to access " + configFile)
else:
    try:
        lines=open(configFile).readlines()
        configjson=json.loads('\n'.join(lines))
    except:
        userio.fail("Unable to parse json data in " + configFile)
    
if 'ontap' in configjson.keys():
    for svm in configjson['ontap']['svm']:
        svmname=svm['name']
        svmuuid=svm['uuid']
        svmlist.append(svmname)
        mgmt=svm['managementLIF']
        mgmtlist.append(mgmt)
        username=svm['username']
        password=svm['password'][0] + ('X' * (len(svm['password'])-2)) + svm['password'][-1]
        if 'dataLIF' in svm.keys():
            datalifs=svm['dataLIF']
            for lif in datalifs.split(','):
                datalist.append(lif)
        else:
            datalif=''
        svmgrid.append([svmname,mgmt,username,password,datalifs])
else:
    configjson['ontap']={'svm':[]}

if 'oracle' in configjson.keys():
    for sid in configjson['oracle']['sid']:
        name=sid['name']
        sidlist.append(name)
        password=sid['password'][0] + ('X' * (len(svm['password'])-2)) + svm['password'][-1]
        dbgrid.append([name,username])
else:
    configjson['oracle']={'sid':[]}

menuoptions=['Manage ONTAP credentials','Manage Oracle databases']
credmode=userio.basicmenu(choices=menuoptions,nowait=True,returnnames=True)[0]

if credmode == 'Manage ONTAP credentials':
    menuoptions=['List credentials','Add credential','Edit credential','Delete credential']
elif credmode == 'Manage Oracle databases':
    menuoptions=['List databases','Register database','Edit database registration','Unregister database']

mode=userio.basicmenu(choices=menuoptions,nowait=True,returnnames=True)[0]

if mode=='List databases':
    userio.grid(dbgrid)
    sys.exit(0)

if mode=='List credentials':
    userio.grid(svmgrid)
    sys.exit(0)

elif mode == 'Unregister database':
    sidlist.sort()
    choice=userio.basicmenu(choices=sidlist,nowait=True,returnnames=True)[0]
    certain=userio.yesno("Are you sure you want to deregister database " + choice)
    if certain:
        for x in range(len(configjson['oracle']['sid'])):
            if configjson['oracle']['sid'][x]['name'] == choice:
                del configjson['oracle']['sid'][x]
                break
        
        try:
            open(configFile,'w').write(json.dumps(configjson,indent=3))
            userio.message("Database " + choice + " unregistered")
        except:
            userio.fail("Unable to write new data to " + configFile)

elif mode == 'Delete credential':
    svmlist.sort()
    choice=userio.basicmenu(choices=svmlist,nowait=True,returnnames=True)[0]
    certain=userio.yesno("Are you sure you want to delete the ONTAP credential for " + choice)
    if certain:
        for x in range(len(configjson['ontap']['svm'])):
            if configjson['ontap']['svm'][x]['name'] == choice:
                del configjson['ontap']['svm'][x]
                break
        try:
            open(configFile,'w').write(json.dumps(configjson,indent=3))
            userio.message("SVM " + choice + " deleted")
        except:
            userio.fail("Unable to write new data to " + configFile)

elif mode == "Register database":
    newsid=''
    while newsid == '': 
        newsid=userio.ask("Enter SID or TNS alias")
        if newsid in sidlist:
            userio.message("SID " + name + " is already defined")
            newsid=''
    
    newuser=userio.ask("Enter new username")
    newpasswd=userio.ask("Enter new password",hide=True)

#    proceed=False
#    while not proceed:
#        newdbfsvm=userio.ask("Enter SVM to host datafile backups")
#        if newdbfsvm not in svmlist:
#            userio.message("SVM " + newdbfsvm + " is not registered")
#            newdbfsvm=''
#        else:
#            proceed=True

#    newdbfaggr=userio.ask("Enter aggregate on SVM " + newdbfsvm + " to host datafile backups [Leave blank to autoselect]")
    
#    proceed=False
#    while not proceed:
#        newlogsvm=userio.ask("Enter SVM to host archive log backups")
#        if newlogsvm not in svmlist:
#            userio.message("SVM " + newlogsvm + " is not registered")
#            newlogsvm=''
#        else:
#            proceed=True

#    newlogaggr=userio.ask("Enter aggregate on SVM " + newlogsvm + " to host archive log backups [Leave blank to autoselect]")
  
#    configjson['nrmd']['sid'].append({'name':newsid,'datafileSVM':newdbfsvm,'archivelogSVM':newlogsvm,'datafileAggr':str(newdbfaggr),'archivelogAggr':newlogaggr})
#    try:
#        open(configFile,'w').write(json.dumps(configjson,indent=4))
#        userio.message(configFile + " updated")
#    except:
#        userio.fail("Unable to write new data to " + configFile)
  
    configjson['oracle']['sid'].append({'name':newsid,'username':str(newuser),'password':newpasswd})
    try:
        open(configFile,'w').write(json.dumps(configjson,indent=4))
        userio.message(configFile + " updated")
    except:
        userio.fail("Unable to write new data to " + configFile)

elif mode == "Add credential":
    newname=''
    while newname == '': 
        newname=userio.ask("Enter SVM name")
        if newname in svmlist:
            userio.warn("SVM " + newname + " is already defined")
            newname=''

    proceed=False
    while not proceed:
        newmgmt=userio.ask("Enter new management interface")
        if newmgmt in mgmtlist:
            userio.warn("Management interface " + newmgmt + " is already known")
        proceed=True

    newuser=userio.ask("Enter new username")
    newpasswd=userio.ask("Enter new password",hide=True)

    proceed=False
    while not proceed:
        newdatalif=userio.ask("Enter new data interface(s), if any")
        proceed=True
  
    out=doREST.doREST(newmgmt,'get','/svm/svms',restargs={'name=':newname,'fields':'name,uuid'},username=newuser,password=newpasswd)
    if not out.result == 0:
        faildata=['Unable to validate credentials for SVM ' + newname]
        faildata.append(out.reason)
        userio.fail(faildata)
    elif not out.response['num_records']:
        userio.fail("Succesfully authenticated to management address, but could not find SVM " + newname)
    else:
        configjson['ontap']['svm'].append({'name':newname,
                                           'managementLIF':newmgmt,
                                           'username':newuser,
                                           'password':newpasswd,
                                           'uuid':out.response['records'][0]['uuid'],
                                           'dataLIF':newdatalif})
    try:
        open(configFile,'w').write(json.dumps(configjson,indent=4))
        userio.message(configFile + " updated")
    except:
        userio.fail("Unable to write new data to " + configFile)

elif mode == "Edit credential":
    svmlist.sort()
    choice=userio.basicmenu(choices=svmlist,nowait=True,returnnames=True)[0]
    
    svm={}
    for x in range(len(configjson['ontap']['svm'])):
        if configjson['ontap']['svm'][x]['name'] == choice:
            svm=configjson['ontap']['svm'][x].copy()
            del configjson['ontap']['svm'][x]
            break

    newname=userio.ask("Enter new SVM name",default=svm['name'])
    newmgmt=userio.ask("Enter new management interface",default=svm['managementLIF'])
    newuser=userio.ask("Enter new username",default=svm['username'])
    newpasswd=userio.ask("Enter new password",hide=True,default=svm['password'][0] + ('X' * (len(svm['password'])-2)) + svm['password'][-1])
    if newpasswd == svm['password'][0] + ('X' * (len(svm['password'])-2)) + svm['password'][-1]:
        newpasswd = svm['password']
    if 'dataLIF' in svm.keys():
        datalifdefault=svm['dataLIF']
    else:
        datalifdefault=''
    newdatalif=userio.ask("Enter new data interface(s), if any",default=datalifdefault)
    
    for x in range(len(configjson['ontap']['svm'])):
        if configjson['ontap']['svm'][x]['name'] == choice:
            del configjson['ontap']['svm'][x]
            break
    
    out=doREST.doREST(newmgmt,'get','/svm/svms',['name=' + newname,'fields=name,uuid'],username=newuser,password=newpasswd)
    if not out.result == 0:
        userio.fail([['Unable to validate credentials for SVM ' + newname] + [out.reason] + [out.stdout] + [out.stderr]])
    elif not out.response['num_records']:
        userio.fail("Succesfully authenticated to management address, but could not find SVM " + newname)
    else:
        configjson['ontap']['svm'].append({'name':newname,
                                           'managementLIF':newmgmt,
                                           'username':newuser,
                                           'password':newpasswd,
                                           'uuid':out.response['records'][0]['uuid'],
                                           'dataLIF':newdatalif})
    try:
        open(configFile,'w').write(json.dumps(configjson,indent=3))
        userio.message(configFile + " updated")
    except:
        userio.fail("Unable to write new data to " + configFile)

elif mode == "Edit database registration":
    sidlist.sort()
    choice=userio.basicmenu(choices=sidlist,nowait=True,returnnames=True)[0]
    
    for x in range(len(configjson['oracle']['sid'])):
        if configjson['oracle']['sid'][x]['name'] == choice:
            sid=configjson['oracle']['sid'][x].copy()
            del configjson['oracle']['sid'][x]
            break
    
    newname=userio.ask("Enter new database name",default=sid['name'])
    newuser=userio.ask("Enter new username",default=sid['username'])
    newpasswd=userio.ask("Enter new password",hide=True,default=sid['password'][0] + ('X' * (len(sid['password'])-2)) + sid['password'][-1])
    
    for x in range(len(configjson['oracle']['sid'])):
        if configjson['oracle']['sid'][x]['name'] == choice:
            del configjson['ontap']['oracle'][x]
            break

    configjson['oracle']['sid'].append({'name':newname,'username':str(newuser),'password':newpasswd})
    try:
        open(configFile,'w').write(json.dumps(configjson,indent=4))
        userio.message(configFile + " updated")
    except:
        userio.fail("Unable to write new data to " + configFile)

